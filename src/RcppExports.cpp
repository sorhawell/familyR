// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_dfirst
int rcpp_dfirst(int source_node, IntegerVector from, IntegerVector to, bool verbose, bool only_nodes, IntegerVector path_stream);
RcppExport SEXP _familyR_rcpp_dfirst(SEXP source_nodeSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP verboseSEXP, SEXP only_nodesSEXP, SEXP path_streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type source_node(source_nodeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type only_nodes(only_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type path_stream(path_streamSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dfirst(source_node, from, to, verbose, only_nodes, path_stream));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_bfirst
NumericVector rcpp_bfirst(int source_node, IntegerVector from, IntegerVector to, int n_epochs, IntegerVector paths_stream, IntegerVector nodes_stream);
RcppExport SEXP _familyR_rcpp_bfirst(SEXP source_nodeSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP n_epochsSEXP, SEXP paths_streamSEXP, SEXP nodes_streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type source_node(source_nodeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type n_epochs(n_epochsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type paths_stream(paths_streamSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodes_stream(nodes_streamSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_bfirst(source_node, from, to, n_epochs, paths_stream, nodes_stream));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_bfirst2
NumericVector rcpp_bfirst2(int source_node, IntegerVector from, IntegerVector to, int n_epochs, IntegerVector paths_stream, IntegerVector nodes_stream);
RcppExport SEXP _familyR_rcpp_bfirst2(SEXP source_nodeSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP n_epochsSEXP, SEXP paths_streamSEXP, SEXP nodes_streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type source_node(source_nodeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< int >::type n_epochs(n_epochsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type paths_stream(paths_streamSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodes_stream(nodes_streamSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_bfirst2(source_node, from, to, n_epochs, paths_stream, nodes_stream));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_familyR_rcpp_dfirst", (DL_FUNC) &_familyR_rcpp_dfirst, 6},
    {"_familyR_rcpp_bfirst", (DL_FUNC) &_familyR_rcpp_bfirst, 6},
    {"_familyR_rcpp_bfirst2", (DL_FUNC) &_familyR_rcpp_bfirst2, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_familyR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
